# -*- coding: utf-8 -*-
"""CodeClause1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17agrz0TMiWpxJ9ek7omY4a5HlENtWlQX
"""

#Import necessary python libraries and packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#Read the file
data=pd.read_csv("/content/telco (1).csv")
data.head()

#dropping nulls if there any and viewing the data
data.dropna()
data.info()

#Cast the features
data["TotalCharges"] = data["TotalCharges"].astype(float)
data.info()

#visualizing the data to know relationships between churn numbers in both genders
plt.figure(figsize = (10,6))
plt.style.use('classic')
ax = sns.countplot(x = "Churn", hue = "gender", data = data, palette= "pastel")
ax.set_title(label = "Churn numbers in both genders", fontsize = 24)
ax.set_xlabel(xlabel = "churn", fontsize = 14)
ax.set_ylabel(ylabel = "Number of Customer", fontsize = 14);

#visualizing the data to know relationships between churn numbers in senior citizens
plt.figure(figsize = (10,6))
plt.style.use('classic')
ax = sns.countplot(x = "Churn", hue = "SeniorCitizen", data =data, palette= "viridis")
ax.set_title(label = "Churn numbers in SeniorCitizen", fontsize = 25)
ax.set_xlabel(xlabel = "churn", fontsize = 16)
ax.set_ylabel(ylabel = "Number of Customer", fontsize = 16);
#churn is high in non senior citizens

#visualizing the data to know relationships between churn numbersaccording to contract
plt.figure(figsize = (10,6))
plt.style.use('classic')
ax = sns.countplot(x = "Churn", hue = "Contract", data = data, palette= "Set1")
ax.set_title(label = "Churn numbers according to Contract", fontsize = 25)
ax.set_xlabel(xlabel = "churn", fontsize = 16)
ax.set_ylabel(ylabel = "Number of Customer", fontsize = 16);
#churn is high for people with month to month contract

data=pd.get_dummies(data,drop_first=True)
data

#putting all the data except for churn (the one to predict) into x and churn into y by 80-20(train,validation-test) percent
from sklearn.model_selection import train_test_split
x=data.drop("Churn_Yes",axis=1)
y=data["Churn_Yes"]
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)
from sklearn.linear_model import LogisticRegression
#training the model
churn_model=LogisticRegression().fit(x_train,y_train);
churn_model

#predicting the churn for the data in x-test
churn_model_prediction = churn_model.predict(x_test)
churn_model_prediction

#Accuracy Check
import sklearn.metrics as sm
churn_model_accuracy_score=sm.accuracy_score(y_test, churn_model_prediction)*100
print("%",churn_model_accuracy_score)

from sklearn.metrics import confusion_matrix as cm
cm(y_test, churn_model_prediction)